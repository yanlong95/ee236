import numpy as np
import cvxpy as cp
import tensorflow as tf
mnist = tf.keras.datasets.mnist


(train_data_raw, train_label), (X_test_raw, y_test) = mnist.load_data()
train_data = train_data_raw.reshape(train_data_raw.shape[0], -1)
X_test = X_test_raw.reshape(X_test_raw.shape[0], -1)


def train(K,train_data,train_label):  
    # Iterate binary train data for all combinations
    W = np.zeros((K,K,784))
    w = np.zeros((K,K))
    for i in range(K):
        for j in range(K):
            if j > i:
                idxi = np.where(train_label == i)
                idxj = np.where(train_label == j)
                train_datai = train_data[idxi[0],:]
                train_dataj = train_data[idxj[0],:]
                if i == 0:
                    train_labeli = train_label[idxi[0]] + 1
                else:
                    train_labeli = train_label[idxi[0]] // i
                train_labelj = train_label[idxj[0]] // -j
                permutation = np.random.permutation(train_labeli.shape[0]+train_labelj.shape[0])
                x_train = np.concatenate((train_datai, train_dataj), axis=0)[permutation, :]
                y_train = np.concatenate((train_labeli, train_labelj))[permutation]
                print(i,j)
                Wij = cp.Variable((784,))
                wij = cp.Variable()
                loss = cp.sum(cp.pos(1 - cp.multiply(y_train, x_train @ Wij - wij)))
                prob = cp.Problem(cp.Minimize(loss))
                prob.solve()
                W[i,j,:] = Wij.value
                w[i,j] = wij.value
    return W,w

def test(K,W,w,X_test,y_test):
    P = np.zeros((K,K))
    for i in range(K):
        for j in range(K):
            if j > i:
                idxi = np.where(y_test == i)
                idxj = np.where(y_test == j)
                X_testi = X_test[idxi[0],:]
                X_testj = X_test[idxj[0],:]
                if i == 0:
                    y_testi = y_test[idxi[0]] + 1
                else:
                    y_testi = y_test[idxi[0]] // i
                y_testj = y_test[idxj[0]] // -j
                permutation = np.random.permutation(y_testi.shape[0]+y_testj.shape[0])
                test_data = np.concatenate((X_testi, X_testj), axis=0)[permutation, :]
                test_label = np.concatenate((y_testi, y_testj))[permutation]
                M = test_label.shape[0]
                f = test_label * (test_data @ W[i,j,:] - w[i,j])
                Pij = np.zeros(M)
                for m in range(M):
                    if f[m] <= 0:
                        Pij[m] = 0
                    else:
                        Pij[m] = 1
                P[i,j] = np.sum(Pij)/M
    return P                

# Change this K value to change the number of classifiers
if __name__ == '__main__':
    K = 2
    W,w = train(K,train_data,train_label)
    P = test(K,W,w,X_test,y_test)
    for i in range (K):
        for j in range(K):
            if j>i:
                print("For the",i,"-",j,"classifier: P=", P[i,j])
